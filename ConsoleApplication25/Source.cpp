#include <iostream>
#include <stdio.h>
#include <time.h>
#include <locale.h>
#define size 20
using namespace std;

int main()
{
	setlocale(LC_ALL, "Rus");
	int task;
	do
	{

		int length = size;
		cout << "Введите номер задания - ";
		cin >> task;
		switch (task)
		{
			case 1:
			{
				int m[size], temp, count = 0, key = 8;//нужно найти 8;
				for (int i = 0; i < size; i++)
				{
					m[i] = -100 + rand() % 200;
					cout << "index [" << i << "] ===  " << m[i] << endl;
				}
				for (int i = 0; i < size; i++)
				{
					for (int j = size - 1; j > i; j--)
					{
						if (m[j - 1] > m[j])
						{
							temp = m[j - 1];
							m[j - 1] = m[j];
							m[j] = temp;
						}
					}
				} for (int i = 0; i < size; i++)
				{
					cout << m[i] << endl;
				}
				
				//Задаем левую и правую границу поиска
				int left = 0;
				int right = 19;

				//найденный индекс элемента равен -1 (минус один - элемент не найден)
				int isSeatch = -1;

				//пока левая граница не "перескочит" правую
				while (left <= right)
				{
					count++;
						//ищем середину отрезка
					int mid = (left + right) / 2;

					//если ключевое поле равно искомому
					//мы нашли требуемый элемент, выходим из цикла
					if (key == m[mid])
					{
						isSeatch = mid;
						break;
					}

					//если искомое ключевое поле меньше найденной середины
					if (key < m[mid])
					{
						//смещаем правую границу, продолжим поиск в левой части
						right = mid - 1;
					} 
					else
					{
						//смещаем левую границу, продолжим поиск в правой части
						left = mid + 1;
					}
				}

				//если индекс элемента по прежнему -1 (минус один), элементт не найден
				if (isSeatch == -1)
				{
					cout << "Элемент не найден!!" << endl;
				}
				else //иначе выводим элемент, его ключ и значение
				{
					cout << " m[" << isSeatch << "]=" << m[isSeatch] << "за" << count << " проходов" << endl;
				}
				cout << endl;
			} break;

			case 2:
			{
				/*Ввести два целочисленных массива − по 10 элементов в каждом.Сформировать новый массив, 
					на четных местах которого будут элементы с нечетными индексами из первого массива, 
					а на нечетных – с четными индексами из второго.*/
				int m1[size], m2[size], m3[size];
				for (int i = 0; i < length; i++)
				{
					m1[i] = -50 + rand() % 100;
					m2[i] = -50 + rand() % 100;
				}
				for (int i = 0; i < length; i++)
				{
					if (i % 2 == 0)
						m3[i] = m1[i + 1];
					else if (i % 2 != 0)
						m3[i] = m2[i - 1];
					cout << "Индекс [" << i << "] , массив 1й = " << m1[i] << "\tмассив 2й = " << m2[i] << "\t массив 3 = " << m3[i] << endl;
				}
			} break;

			case 3:
			{
				/*Ввести целочисленный массив, состоящий из 17 - ти элементов(двузначные целые числа).Вычислить сумму цифр этого массива*/
				int m[17], sum = 0;
				for (int i = 0; i < 17; i++)
				{
					m[i] = 10 + rand() % 89;
					cout << m[i] << endl;
					sum += m[i];
				} cout << "Сумма = " << sum << endl;
			} break;

			case 4:
			{
				/*3.	Ввести два массива X и Y, состоящих из 10 - ти элементов целого типа.
				Сформировать массив S, состоящий из одинаковых элементов исходных массивов*/
				int x[50] = { 0 }, y[50] = { 0 }, s[50] = { 0 };
				for (int i = 0; i < 50; i++)
				{
					x[i] = -50 + rand() % 100;
					y[i] = -50 + rand() % 100;
				}
				for (int i = 0; i < 50; i++)
				{
					for (int j = 1; j < 50; j++)
					{
						if (x[i] == y[j])
							s[i] = x[i];
					}
					cout << s[i] << endl;
				}

			} break;

			case 5:
			{
				/*4.	Дан массив вещественных чисел Z(16).Определить разность между суммой
					элементов c четными индексами и суммой элементов, индексы которых кратны трем*/

				int z[16], sum1 = 0, sum2 = 0;
				for (int i = 0; i < 16; i++)
				{
					z[i] = -50 + rand() % 100;
					cout << "Индекс " << i << " = " << z[i] << endl;
					if (i % 2 == 0)
						sum1 += z[i];
					else if (i % 3 == 0)
						sum2 += z[i];
				}
				cout << "Разность между суммой четных элементов идекса и тех, которые равны трём = " << sum1 - sum2 << endl;

			} break;

			case 6:
			{
				/*Ввести массив, состоящий из 12 элементов действительного типа.
					Расположить элементы в порядке убывания.Определить количество  происшедших при этом перестановок.*/
				int m[12], count = 0, temp;
				for (int i = 0; i < 12; i++)
				{
					m[i] = 1 + rand() % 99;
					cout << "Индекс [" << i << "] = " << m[i] << endl;
				}
				cout << "==============" << endl;
				for (int i = 0; i < 12; i++)
				{
					for (int j = 12 - 1; j > i; j--)
					{
						if (m[j - 1] < m[j])
						{
							temp = m[j - 1];
							m[j - 1] = m[j];
							m[j] = temp;
							count++;
						}
					}
				
					cout << " m = " << m[i] << "\nкол-во перестановок - " << count << endl;
				}
			} break;

			case 7:
			{
				/*6.	Ввести с клавиатуры целочисленный массив, состоящий из 11 элементов.
					Вычислить сумму нечетных по значению отрицательных элементов и заменить элементы кратные трем на эту сумму.*/
				int m[11], sum = 0, m2[11];
				for (int i = 0; i < 11; i++)
				{
					m[i] = -50 + rand() % 100;
					m2[i] = m[i];
					cout << "Index [" << i << "] === " << m2[i] << endl;
					if (m[i] < 0 && m[i] % 2 != 0)
						sum += m[i];
				}
				for (int i = 0; i < length; i++)
				{
					if (m[i] % 3 == 0)
					{
						m[i] = sum;
						cout << m2[i] << "  Заменили на " << m[i] << endl;
					}
				}
				cout << "===========" << endl;
				for (int i = 0; i < 11; i++)
				{
					cout << m[i] << endl;
				}
			} break;

			case 8:
			{
				/*7.	Дан массив вещественных чисел.Определить элемент массива(значение и индекс), 
				который наиболее удален от заданного вещественного числа S.*/
				int m[size], s = -20 + rand() % 80, min = 0, max = 0;
				cout << "s = " << s << endl;
				for (int i = 0; i < length; i++)
				{
					m[i] = -100 + rand() % 200;
					cout << "Index [" << i << "] = " << m[i] << endl;
					if (m[i] < min)
						min = m[i];
					if (m[i] > max)
						max = m[i];
				} 
				if (s < 0)
					cout << "Наиболее удаленное число - " << max << endl;
				else
					cout << "Наиболее удаленное число - " << min << endl;
			} break;

			case 9:
			{
				/*Ввести целочисленный массив, состоящий из 10 элементов.
					Определить сумму и количество элементов, расположенных до первого отрицательного числа*/
				int m[10], sum = 0, count = 0;
				for (int i = 0; i < 10; i++)
				{
					m[i] = -50 + rand() % 100;
					cout << "Index [" << i << "] == " << m[i] << endl;
				}
			} break;

			case 10:
			{
				/*Определить количество локальных минимумов в заданном числовом массиве.
					(Локальный минимум в числовом массиве – это последовательность трех рядом стоящих чисел,
						в которой среднее число меньше стоящих слева и справа от него).*/

				int m[10], count = 0;
				for (int i = 0; i < 10; i++)
				{
					m[i] = -100 + rand() % 200;
					cout << "Index [" << i << "] == " << m[i] << endl;
				}
				for (int i = 1; i < 10; i++)
				{
					if (m[i] < m[i -1] && m[i] < m[i + 1])
					{
						count++;
					}
				}
				cout << "count = " << count << endl;
			} break;

			case 11:
			{
				/*В заданном целочисленном массиве Z(15) положительных, отрицательных и нулевых чисел 
					определить сумму и вывести последовательность значений элементов, 
					которые расположены между первым отрицательным и нулевым элементами.*/

				int z[15], sum = 0, count = 0, zero = 0, minus = -1, raz;
				for (int i = 0; i < 15; i++)
				{
					z[i] = -50 + rand() % 100;
					cout << "Index [" << i << "] === " << z[i] << endl;
				}
				for (int i = 0; i < 15; i++)
				{
					if (z[i] < 0)
					{	
						minus = i;
						for (int j = i; j < 15; j++)
						{
							if (z[j] == 0)
							{
								zero = j;
								break;
							}
						} break;
						break;
					}
				}
				raz = abs(zero - minus);
				cout << "=========" << endl;
				for (int i = 0; i <= raz; i++)
				{
					sum += z[i];
					cout << z[i] << endl;
				} cout << "Сумма равна " << sum << endl;
				
			} break;

			case 12:
			{
				/*11.	В заданном целочисленном массиве удалить элементы, которые встречаются более двух раз.*/
				int m[size], count = 0, hello = 45454545, m2[size];
				for (int i = 0; i < length; i++)
				{
					m[i] = 1 + rand() % 10;
					m2[i] = m[i];
					cout << "Index [" << i << "] == " << m[i] << endl;
				}
				for (int i = 0; i < length; i++)
				{
					for (int j = i; j < length; j++)
					{
						if (m[i] == m[j])
						{
							count++;
							if (count > 2)
								m2[i] = hello; break;

						}	
					}
				} 
				cout << "count = " << count << endl;
				for (int i = 0; i < length; i++)
				{
					cout << "=======" << m2[i] << endl;
				}
			} break;
		}
		
	} while (task < 15);
	

}